// +build !ignore_autogenerated

// Code generated by mga tool. DO NOT EDIT.

package codedriver

import (
	"context"
	"errors"
	"github.com/avoropaev/idp-project/internal/app/code"
	"github.com/go-kit/kit/endpoint"
	kitxendpoint "github.com/sagikazarmark/kitx/endpoint"
)

// endpointError identifies an error that should be returned as an endpoint error.
type endpointError interface {
	EndpointError() bool
}

// serviceError identifies an error that should be returned as a service error.
type serviceError interface {
	ServiceError() bool
}

// Endpoints collects all of the endpoints that compose the underlying service. It's
// meant to be used as a helper struct, to collect all of the endpoints into a
// single parameter.
type Endpoints struct {
	GuidGenerate endpoint.Endpoint
	HashCalc     endpoint.Endpoint
}

// MakeEndpoints returns a(n) Endpoints struct where each endpoint invokes
// the corresponding method on the provided service.
func MakeEndpoints(service code.Service, middleware ...endpoint.Middleware) Endpoints {
	mw := kitxendpoint.Combine(middleware...)

	return Endpoints{
		GuidGenerate: kitxendpoint.OperationNameMiddleware("code.GuidGenerate")(mw(MakeGuidGenerateEndpoint(service))),
		HashCalc:     kitxendpoint.OperationNameMiddleware("code.HashCalc")(mw(MakeHashCalcEndpoint(service))),
	}
}

// GuidGenerateRequest is a request struct for GuidGenerate endpoint.
type GuidGenerateRequest struct {
	Code code.Code
}

// GuidGenerateResponse is a response struct for GuidGenerate endpoint.
type GuidGenerateResponse struct {
	Res code.GuidGenerateResponse
	Err error
}

func (r GuidGenerateResponse) Failed() error {
	return r.Err
}

// MakeGuidGenerateEndpoint returns an endpoint for the matching method of the underlying service.
func MakeGuidGenerateEndpoint(service code.Service) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		req := request.(GuidGenerateRequest)

		res, err := service.GuidGenerate(ctx, req.Code)

		if err != nil {
			if endpointErr := endpointError(nil); errors.As(err, &endpointErr) && endpointErr.EndpointError() {
				return GuidGenerateResponse{
					Err: err,
					Res: res,
				}, err
			}

			return GuidGenerateResponse{
				Err: err,
				Res: res,
			}, nil
		}

		return GuidGenerateResponse{Res: res}, nil
	}
}

// HashCalcRequest is a request struct for HashCalc endpoint.
type HashCalcRequest struct {
	Code code.Code
}

// HashCalcResponse is a response struct for HashCalc endpoint.
type HashCalcResponse struct {
	Res code.HashCalcResponse
	Err error
}

func (r HashCalcResponse) Failed() error {
	return r.Err
}

// MakeHashCalcEndpoint returns an endpoint for the matching method of the underlying service.
func MakeHashCalcEndpoint(service code.Service) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		req := request.(HashCalcRequest)

		res, err := service.HashCalc(ctx, req.Code)

		if err != nil {
			if endpointErr := endpointError(nil); errors.As(err, &endpointErr) && endpointErr.EndpointError() {
				return HashCalcResponse{
					Err: err,
					Res: res,
				}, err
			}

			return HashCalcResponse{
				Err: err,
				Res: res,
			}, nil
		}

		return HashCalcResponse{Res: res}, nil
	}
}
